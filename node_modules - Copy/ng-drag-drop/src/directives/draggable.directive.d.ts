import { ElementRef, EventEmitter, OnInit, Renderer2, NgZone, OnDestroy } from '@angular/core';
import { NgDragDropService } from '../services/ng-drag-drop.service';
import * as ɵngcc0 from '@angular/core';
export declare class Draggable implements OnInit, OnDestroy {
    protected el: ElementRef;
    private renderer;
    private ng2DragDropService;
    private zone;
    /**
     * The data that will be avaliable to the droppable directive on its `onDrop()` event.
     */
    dragData: any;
    /**
     * The selector that defines the drag Handle.
     * If defined drag will only be allowed if dragged from the selector element.
     */
    dragHandle: string;
    /**
     * Currently not used
     */
    dragEffect: string;
    /**
     * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.
     */
    dragScope: string | Array<string>;
    /**
     * The CSS class applied to a draggable element. If a dragHandle is defined then its applied to that handle
     * element only. By default it is used to change the mouse over pointer.
     */
    dragHandleClass: string;
    /**
     * CSS class applied on the source draggable element while being dragged.
     */
    dragClass: string;
    /**
     * CSS class applied on the drag ghost when being dragged.
     */
    dragTransitClass: string;
    /**
     * The url to image that will be used as custom drag image when the draggable is being dragged.
     */
    dragImage: string;
    /**
     * Defines if drag is enabled. `true` by default.
     */
    dragEnabled: boolean;
    /**
     * Event fired when Drag is started
     */
    onDragStart: EventEmitter<any>;
    /**
     * Event fired while the element is being dragged
     */
    onDrag: EventEmitter<any>;
    /**
     * Event fired when drag ends
     */
    onDragEnd: EventEmitter<any>;
    /**
     * @private
     * Keeps track of mouse over element that is used to determine drag handles
     */
    mouseDownElement: any;
    /**
     * @private
     * Backing field for the dragEnabled property
     */
    _dragEnabled: boolean;
    /**
     * @private
     * Backing field for the dragImage property
     */
    _dragImage: string;
    /**
     * @private
     * Image element for the dragImage
     */
    dragImageElement: HTMLImageElement;
    /**
     * @private
     * Function for unbinding the drag listener
     */
    unbindDragListener: Function;
    constructor(el: ElementRef, renderer: Renderer2, ng2DragDropService: NgDragDropService, zone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    dragStart(e: any): void;
    drag(e: any): void;
    dragEnd(e: any): void;
    mousedown(e: any): void;
    private allowDrag();
    private applyDragHandleClass();
    private getDragHandleElement();
    unbindDragListeners(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Draggable, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Draggable, "[draggable]", never, { "dragEffect": "dragEffect"; "dragScope": "dragScope"; "dragHandleClass": "dragHandleClass"; "dragClass": "dragClass"; "dragTransitClass": "dragTransitClass"; "dragImage": "dragImage"; "dragEnabled": "dragEnabled"; "dragData": "dragData"; "dragHandle": "dragHandle"; }, { "onDragStart": "onDragStart"; "onDrag": "onDrag"; "onDragEnd": "onDragEnd"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkcmFnZ2FibGUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgUmVuZGVyZXIyLCBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ0RyYWdEcm9wU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL25nLWRyYWctZHJvcC5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHJhZ2dhYmxlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgcHJvdGVjdGVkIGVsOiBFbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcclxuICAgIHByaXZhdGUgbmcyRHJhZ0Ryb3BTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSB6b25lO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGF0YSB0aGF0IHdpbGwgYmUgYXZhbGlhYmxlIHRvIHRoZSBkcm9wcGFibGUgZGlyZWN0aXZlIG9uIGl0cyBgb25Ecm9wKClgIGV2ZW50LlxyXG4gICAgICovXHJcbiAgICBkcmFnRGF0YTogYW55O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2VsZWN0b3IgdGhhdCBkZWZpbmVzIHRoZSBkcmFnIEhhbmRsZS5cclxuICAgICAqIElmIGRlZmluZWQgZHJhZyB3aWxsIG9ubHkgYmUgYWxsb3dlZCBpZiBkcmFnZ2VkIGZyb20gdGhlIHNlbGVjdG9yIGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIGRyYWdIYW5kbGU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQ3VycmVudGx5IG5vdCB1c2VkXHJcbiAgICAgKi9cclxuICAgIGRyYWdFZmZlY3Q6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogRGVmaW5lcyBjb21wYXRpYmxlIGRyYWcgZHJvcCBwYWlycy4gVmFsdWVzIG11c3QgbWF0Y2ggYm90aCBpbiBkcmFnZ2FibGUgYW5kIGRyb3BwYWJsZS5kcm9wU2NvcGUuXHJcbiAgICAgKi9cclxuICAgIGRyYWdTY29wZTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIENTUyBjbGFzcyBhcHBsaWVkIHRvIGEgZHJhZ2dhYmxlIGVsZW1lbnQuIElmIGEgZHJhZ0hhbmRsZSBpcyBkZWZpbmVkIHRoZW4gaXRzIGFwcGxpZWQgdG8gdGhhdCBoYW5kbGVcclxuICAgICAqIGVsZW1lbnQgb25seS4gQnkgZGVmYXVsdCBpdCBpcyB1c2VkIHRvIGNoYW5nZSB0aGUgbW91c2Ugb3ZlciBwb2ludGVyLlxyXG4gICAgICovXHJcbiAgICBkcmFnSGFuZGxlQ2xhc3M6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQ1NTIGNsYXNzIGFwcGxpZWQgb24gdGhlIHNvdXJjZSBkcmFnZ2FibGUgZWxlbWVudCB3aGlsZSBiZWluZyBkcmFnZ2VkLlxyXG4gICAgICovXHJcbiAgICBkcmFnQ2xhc3M6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQ1NTIGNsYXNzIGFwcGxpZWQgb24gdGhlIGRyYWcgZ2hvc3Qgd2hlbiBiZWluZyBkcmFnZ2VkLlxyXG4gICAgICovXHJcbiAgICBkcmFnVHJhbnNpdENsYXNzOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB1cmwgdG8gaW1hZ2UgdGhhdCB3aWxsIGJlIHVzZWQgYXMgY3VzdG9tIGRyYWcgaW1hZ2Ugd2hlbiB0aGUgZHJhZ2dhYmxlIGlzIGJlaW5nIGRyYWdnZWQuXHJcbiAgICAgKi9cclxuICAgIGRyYWdJbWFnZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZpbmVzIGlmIGRyYWcgaXMgZW5hYmxlZC4gYHRydWVgIGJ5IGRlZmF1bHQuXHJcbiAgICAgKi9cclxuICAgIGRyYWdFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCBmaXJlZCB3aGVuIERyYWcgaXMgc3RhcnRlZFxyXG4gICAgICovXHJcbiAgICBvbkRyYWdTdGFydDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGZpcmVkIHdoaWxlIHRoZSBlbGVtZW50IGlzIGJlaW5nIGRyYWdnZWRcclxuICAgICAqL1xyXG4gICAgb25EcmFnOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgZmlyZWQgd2hlbiBkcmFnIGVuZHNcclxuICAgICAqL1xyXG4gICAgb25EcmFnRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEtlZXBzIHRyYWNrIG9mIG1vdXNlIG92ZXIgZWxlbWVudCB0aGF0IGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGRyYWcgaGFuZGxlc1xyXG4gICAgICovXHJcbiAgICBtb3VzZURvd25FbGVtZW50OiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBCYWNraW5nIGZpZWxkIGZvciB0aGUgZHJhZ0VuYWJsZWQgcHJvcGVydHlcclxuICAgICAqL1xyXG4gICAgX2RyYWdFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQmFja2luZyBmaWVsZCBmb3IgdGhlIGRyYWdJbWFnZSBwcm9wZXJ0eVxyXG4gICAgICovXHJcbiAgICBfZHJhZ0ltYWdlOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBJbWFnZSBlbGVtZW50IGZvciB0aGUgZHJhZ0ltYWdlXHJcbiAgICAgKi9cclxuICAgIGRyYWdJbWFnZUVsZW1lbnQ6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBGdW5jdGlvbiBmb3IgdW5iaW5kaW5nIHRoZSBkcmFnIGxpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIHVuYmluZERyYWdMaXN0ZW5lcjogRnVuY3Rpb247XHJcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgbmcyRHJhZ0Ryb3BTZXJ2aWNlOiBOZ0RyYWdEcm9wU2VydmljZSwgem9uZTogTmdab25lKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgZHJhZ1N0YXJ0KGU6IGFueSk6IHZvaWQ7XHJcbiAgICBkcmFnKGU6IGFueSk6IHZvaWQ7XHJcbiAgICBkcmFnRW5kKGU6IGFueSk6IHZvaWQ7XHJcbiAgICBtb3VzZWRvd24oZTogYW55KTogdm9pZDtcclxuICAgIHByaXZhdGUgYWxsb3dEcmFnKCk7XHJcbiAgICBwcml2YXRlIGFwcGx5RHJhZ0hhbmRsZUNsYXNzKCk7XHJcbiAgICBwcml2YXRlIGdldERyYWdIYW5kbGVFbGVtZW50KCk7XHJcbiAgICB1bmJpbmREcmFnTGlzdGVuZXJzKCk6IHZvaWQ7XHJcbn1cclxuIl19