import { Subscription, Observable } from 'rxjs';
import { ElementRef, EventEmitter, OnInit, OnDestroy, Renderer2, NgZone } from '@angular/core';
import { DropEvent } from '../shared/drop-event.model';
import { NgDragDropService } from '../services/ng-drag-drop.service';
import * as ɵngcc0 from '@angular/core';
export declare class Droppable implements OnInit, OnDestroy {
    protected el: ElementRef;
    private renderer;
    private ng2DragDropService;
    private zone;
    /**
     *  Event fired when Drag dragged element enters a valid drop target.
     */
    onDragEnter: EventEmitter<any>;
    /**
     * Event fired when an element is being dragged over a valid drop target
     */
    onDragOver: EventEmitter<any>;
    /**
     * Event fired when a dragged element leaves a valid drop target.
     */
    onDragLeave: EventEmitter<any>;
    /**
     * Event fired when an element is dropped on a valid drop target.
     */
    onDrop: EventEmitter<DropEvent>;
    /**
     * CSS class that is applied when a compatible draggable is being dragged over this droppable.
     */
    dragOverClass: string;
    /**
     * CSS class applied on this droppable when a compatible draggable item is being dragged.
     * This can be used to visually show allowed drop zones.
     */
    dragHintClass: string;
    /**
     * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.
     */
    dropScope: string | Array<string> | Function;
    /**
     * Defines if drop is enabled. `true` by default.
     */
    dropEnabled: boolean;
    /**
     * @private
     */
    dragStartSubscription: Subscription;
    /**
     * @private
     */
    dragEndSubscription: Subscription;
    /**
     * @private
     * Backing field for the dropEnabled property
     */
    _dropEnabled: boolean;
    /**
     * @private
     * Field for tracking drag state. Helps when
     * drag stop event occurs before the allowDrop()
     * can be calculated (async).
     */
    _isDragActive: boolean;
    /**
     * @private
     * Field for tracking if service is subscribed.
     * Avoids creating multiple subscriptions of service.
     */
    _isServiceActive: boolean;
    /**
     * @private
     * Function for unbinding the drag enter listener
     */
    unbindDragEnterListener: Function;
    /**
     * @private
     * Function for unbinding the drag over listener
     */
    unbindDragOverListener: Function;
    /**
     * @private
     * Function for unbinding the drag leave listener
     */
    unbindDragLeaveListener: Function;
    constructor(el: ElementRef, renderer: Renderer2, ng2DragDropService: NgDragDropService, zone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    dragEnter(e: any): void;
    dragOver(e: any, result: any): void;
    dragLeave(e: any): void;
    drop(e: any): void;
    allowDrop(): Observable<boolean>;
    subscribeService(): void;
    unsubscribeService(): void;
    unbindDragListeners(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Droppable, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Droppable, "[droppable]", never, { "dragOverClass": "dragOverClass"; "dragHintClass": "dragHintClass"; "dropScope": "dropScope"; "dropEnabled": "dropEnabled"; }, { "onDragEnter": "onDragEnter"; "onDragOver": "onDragOver"; "onDragLeave": "onDragLeave"; "onDrop": "onDrop"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcHBhYmxlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkcm9wcGFibGUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YnNjcmlwdGlvbiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT25EZXN0cm95LCBSZW5kZXJlcjIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEcm9wRXZlbnQgfSBmcm9tICcuLi9zaGFyZWQvZHJvcC1ldmVudC5tb2RlbCc7XHJcbmltcG9ydCB7IE5nRHJhZ0Ryb3BTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbmctZHJhZy1kcm9wLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEcm9wcGFibGUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcm90ZWN0ZWQgZWw6IEVsZW1lbnRSZWY7XHJcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xyXG4gICAgcHJpdmF0ZSBuZzJEcmFnRHJvcFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHpvbmU7XHJcbiAgICAvKipcclxuICAgICAqICBFdmVudCBmaXJlZCB3aGVuIERyYWcgZHJhZ2dlZCBlbGVtZW50IGVudGVycyBhIHZhbGlkIGRyb3AgdGFyZ2V0LlxyXG4gICAgICovXHJcbiAgICBvbkRyYWdFbnRlcjogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGZpcmVkIHdoZW4gYW4gZWxlbWVudCBpcyBiZWluZyBkcmFnZ2VkIG92ZXIgYSB2YWxpZCBkcm9wIHRhcmdldFxyXG4gICAgICovXHJcbiAgICBvbkRyYWdPdmVyOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgZmlyZWQgd2hlbiBhIGRyYWdnZWQgZWxlbWVudCBsZWF2ZXMgYSB2YWxpZCBkcm9wIHRhcmdldC5cclxuICAgICAqL1xyXG4gICAgb25EcmFnTGVhdmU6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCBmaXJlZCB3aGVuIGFuIGVsZW1lbnQgaXMgZHJvcHBlZCBvbiBhIHZhbGlkIGRyb3AgdGFyZ2V0LlxyXG4gICAgICovXHJcbiAgICBvbkRyb3A6IEV2ZW50RW1pdHRlcjxEcm9wRXZlbnQ+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDU1MgY2xhc3MgdGhhdCBpcyBhcHBsaWVkIHdoZW4gYSBjb21wYXRpYmxlIGRyYWdnYWJsZSBpcyBiZWluZyBkcmFnZ2VkIG92ZXIgdGhpcyBkcm9wcGFibGUuXHJcbiAgICAgKi9cclxuICAgIGRyYWdPdmVyQ2xhc3M6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQ1NTIGNsYXNzIGFwcGxpZWQgb24gdGhpcyBkcm9wcGFibGUgd2hlbiBhIGNvbXBhdGlibGUgZHJhZ2dhYmxlIGl0ZW0gaXMgYmVpbmcgZHJhZ2dlZC5cclxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gdmlzdWFsbHkgc2hvdyBhbGxvd2VkIGRyb3Agem9uZXMuXHJcbiAgICAgKi9cclxuICAgIGRyYWdIaW50Q2xhc3M6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogRGVmaW5lcyBjb21wYXRpYmxlIGRyYWcgZHJvcCBwYWlycy4gVmFsdWVzIG11c3QgbWF0Y2ggYm90aCBpbiBkcmFnZ2FibGUgYW5kIGRyb3BwYWJsZS5kcm9wU2NvcGUuXHJcbiAgICAgKi9cclxuICAgIGRyb3BTY29wZTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiB8IEZ1bmN0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZpbmVzIGlmIGRyb3AgaXMgZW5hYmxlZC4gYHRydWVgIGJ5IGRlZmF1bHQuXHJcbiAgICAgKi9cclxuICAgIGRyb3BFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBkcmFnU3RhcnRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZHJhZ0VuZFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQmFja2luZyBmaWVsZCBmb3IgdGhlIGRyb3BFbmFibGVkIHByb3BlcnR5XHJcbiAgICAgKi9cclxuICAgIF9kcm9wRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEZpZWxkIGZvciB0cmFja2luZyBkcmFnIHN0YXRlLiBIZWxwcyB3aGVuXHJcbiAgICAgKiBkcmFnIHN0b3AgZXZlbnQgb2NjdXJzIGJlZm9yZSB0aGUgYWxsb3dEcm9wKClcclxuICAgICAqIGNhbiBiZSBjYWxjdWxhdGVkIChhc3luYykuXHJcbiAgICAgKi9cclxuICAgIF9pc0RyYWdBY3RpdmU6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBGaWVsZCBmb3IgdHJhY2tpbmcgaWYgc2VydmljZSBpcyBzdWJzY3JpYmVkLlxyXG4gICAgICogQXZvaWRzIGNyZWF0aW5nIG11bHRpcGxlIHN1YnNjcmlwdGlvbnMgb2Ygc2VydmljZS5cclxuICAgICAqL1xyXG4gICAgX2lzU2VydmljZUFjdGl2ZTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEZ1bmN0aW9uIGZvciB1bmJpbmRpbmcgdGhlIGRyYWcgZW50ZXIgbGlzdGVuZXJcclxuICAgICAqL1xyXG4gICAgdW5iaW5kRHJhZ0VudGVyTGlzdGVuZXI6IEZ1bmN0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogRnVuY3Rpb24gZm9yIHVuYmluZGluZyB0aGUgZHJhZyBvdmVyIGxpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIHVuYmluZERyYWdPdmVyTGlzdGVuZXI6IEZ1bmN0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogRnVuY3Rpb24gZm9yIHVuYmluZGluZyB0aGUgZHJhZyBsZWF2ZSBsaXN0ZW5lclxyXG4gICAgICovXHJcbiAgICB1bmJpbmREcmFnTGVhdmVMaXN0ZW5lcjogRnVuY3Rpb247XHJcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgbmcyRHJhZ0Ryb3BTZXJ2aWNlOiBOZ0RyYWdEcm9wU2VydmljZSwgem9uZTogTmdab25lKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgZHJhZ0VudGVyKGU6IGFueSk6IHZvaWQ7XHJcbiAgICBkcmFnT3ZlcihlOiBhbnksIHJlc3VsdDogYW55KTogdm9pZDtcclxuICAgIGRyYWdMZWF2ZShlOiBhbnkpOiB2b2lkO1xyXG4gICAgZHJvcChlOiBhbnkpOiB2b2lkO1xyXG4gICAgYWxsb3dEcm9wKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICBzdWJzY3JpYmVTZXJ2aWNlKCk6IHZvaWQ7XHJcbiAgICB1bnN1YnNjcmliZVNlcnZpY2UoKTogdm9pZDtcclxuICAgIHVuYmluZERyYWdMaXN0ZW5lcnMoKTogdm9pZDtcclxufVxyXG4iXX0=